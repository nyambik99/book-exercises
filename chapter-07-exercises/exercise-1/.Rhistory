# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("me", "myself")
names
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
tot_n
# Add 1 to each element in `n` and print the result
tot_n <- n + 1
tot_n
?seq()
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(from 10, to = 1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(from = 10, to = 1)
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Add 1 to each element in `n` and print the result
n <- n + 1
n
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(from = -5, to = 10, by = 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin(x_range)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- c(sin(x_range))
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- c(cos(x_range))
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(from = 21, to = 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[c(2,3,4,5)]
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[1]
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[1]
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers["11"]
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[1]
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[[11]]
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(from = 1, to = 100, by 2)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(from = 1, to = 100, by = 2)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(from = 1, to = 100, by = 1)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(from = 2, to = 100, by = 1)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(from = 2, to = 100, by = 2)
?all(0)
?modulo
?mod()
?modulo
?%
?%%
?'%%'
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even, even %% 2 == 0)
?all
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% == 0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% = 0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1, 2, 3]
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- c(phone_numbers[1, 2, 3])
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- c(phone_numbers[1])
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[c(1,2,3)]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers(phone_numbers < 5)
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers < 5]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
larger <- phone_numbers[phone_numbers > 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
replace(phone_numbers, phone_numbers > 5, 5)
# Replace every odd-numbered value in `phone_numbers` with the number 0
replace(phone_numbers, phone_numbers %% 2 != 0, 0)
