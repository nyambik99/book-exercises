# Create a variable `titanic_df` by converting `Titanic` into a data frame;
# you can use the `data.frame()` function or `as.data.frame()`
# Hint: Be sure to **not** treat strings as factors!
titanic_df <- as.data.frame(Titanic)
View(titanic_df)
# Create a variable `children` that is a data frame containing only the rows
# from `titanic_df` with information about children on the Titanic
# Hints:
# - Filter rows using a vector of boolean values (like vector filtering)
# - See chapter 10.2.3
children <- titanic_df[titanic_df$Age == 'Child', ]
View(children)
# Create a variable `num_children` that is the total number of children.
# Hint: Remember the `sum()` function!
num_children <- sum(children$Freq)
Titanic
# Create a variable `most_lost` that is the *row* from `titanic_df` with the
# largest absolute number of losses (people who did not survive)
# You can use multiple lines of code if you find that helpful
# to create this variable
# Hint: Filter for those who did not survive, then look for the row
not_survived <- titanic_df[titanic_df$Survived == 'No', ]
most_lost <- not_survived[max(not_survived$Freq), ]
View(most_lost)
View(not_survived)
most_lost <- not_survived[not_survived$Freq == max(not_survived$Freq), ]
most_lost <- not_survived[not_survived$Freq == max(not_survived$Freq), ]
View(most_lost)
?filter
survival_rate <- function(class, dframe) {
f_class <- dframe[dframe$Class == class, ]
men <- f_class[f_class$Sex == 'Men', ]
men_tot <- count(men$Survived == 'Yes', "Freq") / count(men$Freq)
women_child <- f_class[f_class$Sex != 'Men', ]
women_child_tot <- count(women_child$Survived == 'Yes', "Freq") / count(women_child$Freq)
answer <- paste("Of", class, "class,", women_child_tot, "of women and children survived and",
men_tot, "of men survived.")
return(answer)
}
survival_rate <- function(class, dframe) {
f_class <- dframe[dframe$Class == class, ]
men <- f_class[f_class$Sex == 'Men', ]
men_tot <- count(men$Survived == 'Yes', "Freq") / count(men$Freq)
women_child <- f_class[f_class$Sex != 'Men', ]
women_child_tot <- count(women_child$Survived == 'Yes', "Freq") / count(women_child$Freq)
answer <- paste("Of", class, "class,", women_child_tot, "of women and children survived and",
men_tot, "of men survived.")
return(answer)
}
survival_rate(Crew, Titanic)
survival_rate("Crew", Titanic)
?select()
survival_rate("1st", not_survived)
survival_rate <- function(class, dframe) {
f_class <- dframe[dframe$Class == class, ]
men <- f_class[f_class$Sex == 'Men', ]
men_tot <- sum(men$Survived == 'Yes', "Freq") / sum(men$Freq)
women_child <- f_class[f_class$Sex != 'Men', ]
women_child_tot <- sum(women_child$Survived == 'Yes', "Freq") / sum(women_child$Freq)
answer <- paste("Of", class, "class,", women_child_tot, "of women and children survived and",
men_tot, "of men survived.")
return(answer)
}
survival_rate("1st", titanic_df)
?sum
survival_rate <- function(class, dframe) {
f_class <- dframe[dframe$Class == class, ]
men <- f_class[f_class$Sex == 'Men', ]
men_survived <- men[men$Survived == 'Yes', ]
men_tot <- sum(men_survived$Freq) / sum(men$Freq)
women_child <- f_class[f_class$Sex != 'Men', ]
women_child_survived <- women_child[women_child$Survived == 'Yes', ]
women_child_tot <- sum(women_child_survived$freq) / sum(women_child$Freq)
answer <- paste("Of", class, "class,", women_child_tot, "of women and children survived and",
men_tot, "of men survived.")
return(answer)
}
survival_rate <- function(class, dframe) {
f_class <- dframe[dframe$Class == class, ]
men <- f_class[f_class$Sex == 'Men', ]
men_survived <- men[men$Survived == 'Yes', ]
men_tot <- sum(men_survived$Freq) / sum(men$Freq)
women_child <- f_class[f_class$Sex != 'Men', ]
women_child_survived <- women_child[women_child$Survived == 'Yes', ]
women_child_tot <- sum(women_child_survived$freq) / sum(women_child$Freq)
answer <- paste("Of", class, "class,", women_child_tot, "of women and children survived and",
men_tot, "of men survived.")
return(answer)
}
survival_rate("1st", titanic_df)
survival_rate <- function(class, dframe) {
f_class <- dframe[dframe$Class == class, ]
men <- f_class[f_class$Sex == 'Men', ]
men_survived <- men[men$Survived == 'Yes', ]
men_tot <- sum(men_survived$Freq, na.rm = FALSE) / sum(men$Freq, na.rm = FALSE)
women_child <- f_class[f_class$Sex != 'Men', ]
women_child_survived <- women_child[women_child$Survived == 'Yes', ]
women_child_tot <- sum(women_child_survived$freq, na.rm = FALSE) / sum(women_child$Freq, na.rm = FALSE)
answer <- paste("Of", class, "class,", women_child_tot, "of women and children survived and",
men_tot, "of men survived.")
return(answer)
}
survival_rate("1st", titanic_df)
survival_rate <- function(class, dframe) {
f_class <- dframe[dframe$Class == class, ]
men <- f_class[f_class$Sex == 'Men', ]
men_survived <- men[men$Survived == 'Yes', ]
men_tot <- sum(men_survived$Freq, na.rm = TRUE) / sum(men$Freq, na.rm = TRUE)
women_child <- f_class[f_class$Sex != 'Men', ]
women_child_survived <- women_child[women_child$Survived == 'Yes', ]
women_child_tot <- sum(women_child_survived$freq, na.rm = TRUE) / sum(women_child$Freq, na.rm = TRUE)
answer <- paste("Of", class, "class,", women_child_tot, "of women and children survived and",
men_tot, "of men survived.")
return(answer)
}
survival_rate("1st", titanic_df)
survival_rate <- function(class, dframe) {
f_class <- dframe[dframe$Class == class, ]
men <- f_class[f_class$Sex == 'Male', ]
men_survived <- men[men$Survived == 'Yes', ]
men_tot <- sum(men_survived$Freq, na.rm = TRUE) / sum(men$Freq, na.rm = TRUE)
women_child <- f_class[f_class$Sex != 'Men', ]
women_child_survived <- women_child[women_child$Survived == 'Yes', ]
women_child_tot <- sum(women_child_survived$freq, na.rm = TRUE) / sum(women_child$Freq, na.rm = TRUE)
answer <- paste("Of", class, "class,", women_child_tot, "of women and children survived and",
men_tot, "of men survived.")
return(answer)
}
survival_rate("1st", titanic_df)
survival_rate <- function(class, dframe) {
f_class <- dframe[dframe$Class == class, ]
men <- f_class[f_class$Sex == 'Male', ]
men_survived <- men[men$Survived == 'Yes', ]
men_tot <- sum(men_survived$Freq, na.rm = TRUE) / sum(men$Freq, na.rm = TRUE)
women_child <- f_class[f_class$Sex != 'Male', ]
women_child_survived <- women_child[women_child$Survived == 'Yes', ]
women_child_tot <- sum(women_child_survived$freq, na.rm = TRUE) / sum(women_child$Freq, na.rm = TRUE)
answer <- paste("Of", class, "class,", women_child_tot, "of women and children survived and",
men_tot, "of men survived.")
return(answer)
}
survival_rate("1st", titanic_df)
survival_rate <- function(class, dframe) {
f_class <- dframe[dframe$Class == class, ]
men <- f_class[f_class$Sex == 'Male', ]
men_survived <- men[men$Survived == 'Yes', ]
men_tot <- sum(men_survived$Freq, na.rm = TRUE) / sum(men$Freq, na.rm = TRUE)
women_child <- f_class[f_class$Sex != 'Male', ]
women_child_survived <- women_child[women_child$Survived == 'Yes', ]
women_child_tot <- sum(women_child_survived$freq, na.rm = TRUE) / sum(women_child$Freq, na.rm = TRUE)
answer <- paste0("Of ", class, " class, ", round(women_child_tot, digits = 2) * 100,
"% of women and children survived and ",
round(men_tot, digits = 2) * 100, "% of men survived.")
return(answer)
survival_rate('1st', titanic_df)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(fueleconomy::vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makers <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makers)
# Filter the data set for vehicles manufactured in 1997
made_1997 <- vehicles[vehicles$year == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
made_1997[order(made_1997$hwy), ]
# Filter the data set for vehicles manufactured in 1997
made_1997 <- vehicles[vehicles$year == 1997, ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
made_1997$average <- mean(made_1997$hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
made_1997$average <- mean(made_1997$hwy)
View(made_1997)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
made_1997$average <- mean((made_1997$hwy + made_1997$cty)/2)
View(made_1997)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
made_1997$average <- (made_1997$hwy + made_1997$cty) / 2
View(made_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- filter(vehicles, drive == '2-Wheel Drive' & cty > 20)
twowd_ovr20 <- made_1997 %>%
filter(
drive != '4-Wheel Drive' && drive != '4-Wheel or All-Wheel Drive' &&
cty >= 20
)
library(dplyr)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(
drive != '4-Wheel Drive' && drive != '4-Wheel or All-Wheel Drive' &&
cty >= 20
)
View(twowd_ovr20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20)
View(twowd_ovr20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20 & drive != '4-Wheel Drive')
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20 & drive != '4-Wheel Drive')
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20) %>%
filter(drive != '4-Wheel Drive')
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20) %>%
filter(drive != '4-Wheel Drive')
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20) %>%
filter(drive == '4-Wheel Drive')
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20) %>%
filter(drive == '2-Wheel Drive')
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20) %>% filter(drive == Rear-Wheel Drive)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20) %>% filter(drive == "Rear-Wheel Drive")
View(twowd_ovr20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20) %>%
filter(drive == 'Rear-Wheel Drive')
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20) %>%
filter(drive == 'Rear-Wheel Drive')
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20) %>%
filter(drive == 'Rear-Wheel Drive' & 'Front-Wheel Drive')
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20) %>%
filter(drive == 'Rear-Wheel Drive' && 'Front-Wheel Drive')
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20) %>%
filter(drive == 'Rear-Wheel Drive' || 'Front-Wheel Drive')
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20) %>%
filter(drive == 'Rear-Wheel Drive' | 'Front-Wheel Drive')
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20) %>%
filter(drive != "4-Wheel Drive")
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twowd_ovr20 <- made_1997 %>%
filter(cty >= 20) %>%
filter(drive != "4-Wheel Drive" & drive != "4-Wheel or All-Wheel Drive")
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy_mgp_id <- twowd_ovr20 %>%
filter(hwy == min(hwy, na.rm = TRUE)) %>%
pull(id)
most_mpg <- function(year_choice, make_choice) {
answer <- vehicles %>%
select(model, year, make, hwy)
filter(year == year_choice & make == make_choice) %>%
filter(hwy == max(hwy, na.rm = TRUE)) %>%
pull(model)
}
most_mpg("Honda", 1995)
ost_mpg <- function(year_choice, make_choice) {
answer <- vehicles %>%
select(model, year, make, hwy)
filter(year == year_choice & make == make_choice) %>%
filter(hwy == max(hwy, na.rm = TRUE)) %>%
pull(model)
}
most_mpg("Honda", 1995)
most_mpg <- function(year_choice, make_choice) {
answer <- vehicles %>%
filter(year == year_choice & make == make_choice) %>%
filter(hwy == max(hwy, na.rm = TRUE)) %>%
pull(model)
}
most_mpg("Honda", 1995)
View(ost_mpg)
most_mpg <- function(year_choice, make_choice) {
answer <- vehicles %>%
filter(year == year_choice & make == make_choice) %>%
filter(hwy == max(hwy, na.rm = TRUE)) %>%
pull(model)
}
most_mpg("Honda", 1995)
