# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
force(USPersonalExpenditure)
View(USPersonalExpenditure)
View(USPersonalExpenditure)
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPEx <- data.frame(USPersonalExpenditure)
View(USPEx)
# Add a column "category" to your data frame that contains the rownames
USPEx$category
# Add a column "category" to your data frame that contains the rownames
USPEx$category <-
USPEx$category <-
# Add a column "category" to your data frame that contains the rownames
USPEx$category <- row.names(USPEx)
View(USPEx)
# How much money was spent on personal care in 1940?
USPEx["Personal Care", X1945]
# How much money was spent on personal care in 1940?
USPEx["Personal Care", "X1945"]
View(USPEx)
# How much money was spent on personal care in 1940?
USPEx[Personal Care, "X1945"]
# How much money was spent on Food and Tobacco in 1960?
USPEx["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
USPEx[max(USPEx$X1960), "category"]
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPEx <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# Add a column "category" to your data frame that contains the rownames
USPEx$category <- row.names(USPEx)
# How much money was spent on personal care in 1940?
USPEx["Personal Care", "X1945"]
# How much money was spent on Food and Tobacco in 1960?
USPEx["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
USPEx[max(USPEx$X1960), "category"]
# What was the highest expenditure category in 1960?
USPEx["max(USPEx$X1960)", "category"]
# What was the highest expenditure category in 1960?
USPEx[max(USPEx$X1960), "category"]
max(USPEx$X1960)
# What was the highest expenditure category in 1960?
USPEx[max(USPEx$X1960), 6]
max(X1960)
max(USPEx$X1960)
# What was the highest expenditure category in 1960?
USPEx['max(USPEx$X1960)', 6]
USPEx['max(USPEx$X1960)', 6]
max(USPEx$X1960)
'max(USPEx$X1960)'
# What was the highest expenditure category in 1960?
USPEx[[max(USPEx$X1960)], 6]
# What was the highest expenditure category in 1960?
USPEx[[[max(USPEx$X1960)]], 6]
# What was the highest expenditure category in 1960?
USPEx[['max(USPEx$X1960)'], 6]
# What was the highest expenditure category in 1960?
USPEx['X1960' == max(USPEx$X1960), 6]
USPEx['X1960' == max(USPEx$X1960), 6]
max(USPEx$X1960)
USPEx[X1960[USPEx$X1960 == max(USPEx$X1960)], 6]
# What was the highest expenditure category in 1960?
USPEx[X1960[max(USPEx$X1960)], 6]
# What was the highest expenditure category in 1960?
USPEx[USPEx$X1960[max(USPEx$X1960)], 6]
USPEx[USPEx$X1960[max(USPEx$X1960)], 6]
USPEx$X1960[max(USPEx$X1960)]
# What was the highest expenditure category in 1960?
USPEx[USPEx$X1960[USPEx$X1960 == max(USPEx$X1960)], 6]
USPEx[USPEx$X1960[X1960 == max(USPEx$X1960)], 6]
USPEx$X1960[max(USPEx$X1960)]
# What was the highest expenditure category in 1960?
USPEx[max.col(USPEx$X1960), ]
# What was the highest expenditure category in 1960?
USPEx[max.col(USPEx$X1960), "category"]
# What was the highest expenditure category in 1960?
USPEx[max(USPEx$X1960), "category"]
# What was the highest expenditure category in 1960?
USPEx[max.col(USPEx$X1960), "category"]
?max.col
# What was the highest expenditure category in 1960?
USPEx[USPEx$X1960 == max(USPEx$X1960), "category"]
lowest_category <- function(x) {
answer <- USPEx[USPEx$x == max(USPEx$x), "category"]
return(answer)
}
lowest_category(X1955)
year <- paste0("X", x)
lowest_category <- function(x) {
year <- paste0("X", x)
answer <- USPEx[USPEx$x == max(USPEx$x), "category"]
lowest_category <- function(x) {
year <- paste0("X", x)
answer <- USPEx[USPEx$year == max(USPEx$year), "category"]
return(answer)
}
lowest_category(1955)
View(lowest_category)
lowest_category(1960)
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPEx <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# What are the column names of your dataframe?
### X1940, X1945, X1950, X1955, X1960
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
### Food and Tobacco, Medical and Health, Personal Care, Private Education
# Add a column "category" to your data frame that contains the rownames
USPEx$category <- row.names(USPEx)
# How much money was spent on personal care in 1940?
USPEx["Personal Care", "X1945"]
# How much money was spent on Food and Tobacco in 1960?
USPEx["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
USPEx[USPEx$X1960 == max(USPEx$X1960), "category"]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(x) {
year <- paste0("X", x)
answer <- USPEx[USPEx$year == max(USPEx$year), "category"]
return(answer)
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest_category(1960)
paste0("X", x)
lowest_category <- function(x) {
year <- paste0("X", x)
lowest_category <- function(x) {
year <- paste0("X", x)
answer <- USPEx[USPEx[[year]] == max(USPEx[[year]]), "category"]
return(answer)
}
lowest_category(1960)
lowest_category <- function(x) {
year <- paste0("X", x)
answer <- USPEx[USPEx[[year]] == max(USPEx[[year]]), "category"]
return(answer)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(x) {
year <- paste0("X", x)
answer <- USPEx[USPEx[[year]] == max(USPEx[[year]]), "category"]
return(answer)
}
lowest_category(1955)
lowest_category(1940)
lowest_category <- function(x) {
year <- paste0("X", x)
answer <- USPEx[USPEx[[year]] == min(USPEx[[year]]), "category"]
return(answer)
}
year <- paste0("X", x)
View(lowest_category)
View(lowest_category)
View(lowest_category)
View(lowest_category)
View(lowest_category)
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPEx <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# What are the column names of your dataframe?
### X1940, X1945, X1950, X1955, X1960
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
### Food and Tobacco, Medical and Health, Personal Care, Private Education
# Add a column "category" to your data frame that contains the rownames
USPEx$category <- row.names(USPEx)
# How much money was spent on personal care in 1940?
USPEx["Personal Care", "X1945"]
# How much money was spent on Food and Tobacco in 1960?
USPEx["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
USPEx[USPEx$X1960 == max(USPEx$X1960), "category"]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(x) {
year <- paste0("X", x)
answer <- USPEx[USPEx[[year]] == min(USPEx[[year]]), "category"]
return(answer)
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest_category(1950)
?sapply
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(1950, lowest_category)
sapply(1955, lowest_category)
sapply(1960, lowest_category)
sapply(c(1940, 1945, 1950, 1955, 1960))
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(c(1940, 1945, 1950, 1955, 1960), lowest_category)
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "10-2 Exercise", row.names = FALSE)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee <- c(paste("Employee", 1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary <- c(runif(100, min = 40000, max = 50000))
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustment <- c(runif(100, min = -5000, max = 10000))
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employee, salary, adjustment, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$adjusted <- salary + adjustment
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- adjustment > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[57, 2]
# 45887.84
# How many employees got a raise?
length(salaries$raise[salaries$raise == TRUE])
# What was the dollar value of the highest raise?
max(salaries$adjustment)
# 9857.903
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustment > 9857.903, 1]
# What was the largest decrease in salaries between the two years?
min(salaries$adjustment)
# -4906.236
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustment < -4906, 1]
# Employee 99
# What was the average salary change?
mean(salaries$adjustment)
# 2233.542
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$adjustment[adjustment < 0])
# -2517.779
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# yes
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "10-2 Exercise", row.names = FALSE)
