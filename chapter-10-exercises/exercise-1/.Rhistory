# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
score <- c(21, 13, 30, 12)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
scd_against <- c(26, 27, 24, 28)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(score, scd_against)
View(games)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- score - scd_against
View(games)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
sc_against <- c(26, 27, 24, 28)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scored <- c(21, 13, 30, 12)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
scd_against <- c(26, 27, 24, 28)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(score, scd_against)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- score - scd_against
# Combine your two vectors into a dataframe called `games`
games <- data.frame(scored, scd_against)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- score - scd_against
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- scored - scd_against
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- diff > 0
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
View(games)
# Create a vector of the opponent names corresponding to the games played
opponent <- c("vs 49ers", "vs Cardinals", "@ Panthers", "@ Rams")
# Assign your dataframe rownames of their opponents
row.names(games) <- opponent
View(games)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scored <- c(21, 13, 30, 12)
View(games)
games
library()
# Load the `stringr` package (install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
library("stringr")
# Load the `stringr` package (install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
library("stringr")
# Create a variable `my_age` that is equal to your age
my_age <- 20
# Create a variable `my_name` that is equal to your first name
my_name <- "Sofyar"
# Using a multiplication expression, create a variable `minutes_in_a_day` that
# is equal to the number of minutes in a day
minutes_in_a_day <- 24 * 60
# Using a multiplication expression, create a variable `hours_in_a_year` that
# is equal to the number of hours in a year
hours_in_a_year <- 24 *365
# Create a variable `more_minutes_than_hours` that is a boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise, it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
make_introduction <- function(name, age){
answer <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.")
return(answer)
}
make_introduction(rio, 20)
make_introduction("rio", "20")
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, "my_age")
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
?ggsub
?gsub
?sub
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub(my_intro, "Hello, my name is", "Hey, I'm")
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- str_replace(my_intro, "Hello, my name is", "Hey, I'm")
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all lower-case letters
quiet_intro <- tolower(my_intro)
str_to_title
?str_to_title
# Create a new variable `capitalized_intro`, which is your `my_intro` variable
# but with each word capitalized
# Hint: Google search the stringr function `str_to_title`
capitalized_intro <- str_to_title(my_intro)
# Create a new variable `capitalized_intro`, which is your `my_intro` variable
# but with each word capitalized
# Hint: Google search the stringr function `str_to_title`
capitalized_intro <- str_to_upper(my_intro)
# Create a new variable `capitalized_intro`, which is your `my_intro` variable
# but with each word capitalized
# Hint: Google search the stringr function `str_to_title`
capitalized_intro <- str_to_title(my_intro, "Hello", "my", "name", "is", "and", "I'm", "years", "old")
?sapply(list, function)
?sapply
words_cap <- function(string) {
split <- strsplit(string, "")[[1]]
paste(toupper(substring(s, 1,1)), sep = "", collapse = " ")
}
sapply(my_intro, words_cap)
words_cap <- function(string) {
split <- strsplit(string, "")[[1]]
p
sapply(my_intro, words_cap)
?str_count
?str_count
View(words_cap)
View(words_cap)
# Using the `str_count` function from stringr, create a variable `occurrences`
# that stores the # of times the letter "e" appears in `my_intro`
occurences <- str_count(my_intro = "e")
# Using the `str_count` function from stringr, create a variable `occurrences`
# that stores the # of times the letter "e" appears in `my_intro`
occurences <- str_count(my_intro, "e")
