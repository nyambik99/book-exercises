# Define a function `is_twice_as_long` that takes in two character strings, and
# returns whether or not (e.g., a boolean) the length of one argument is greater
# than or equal to twice the length of the other.
# Hint: compare the length difference to the length of the smaller string
is_twice_as_long <- function(str1, str2) {
answer <- "either string is not greater or equal to twice the length of the other"
if (nchar(stmt1) >= 2 * nchar(stmt2)) {
answer <- "one string is greater or equal to twice the length of the other"
} if (2 * nchar(stmt1) <= nchar(stmt2)) {
answer <- "one string is greater or equal to twice the length of the other"
}
return(answer)
}
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long("hahahahaha", "haha")
is_twice_as_long("haha", "hahahahaha")
is_twice_as_long("haha", "haha")
is_twice_as_long("hahaha", "haha")
is_twice_as_long <- function(str1, str2) {
answer <- "either string is not greater or equal to twice the length of the other"
if (nchar(stmt1) >= 2 * nchar(stmt2)) {
answer <- "one string is greater or equal to twice the length of the other"
} if (2 * nchar(stmt1) <= nchar(stmt2)) {
answer <- "one string is greater or equal to twice the length of the other"
}
return(answer)
}
if (2 * nchar(stmt1) <= nchar(stmt2)) {
answer <- "one string is greater or equal to twice the length of the other"
}
is_twice_as_long <- function(str1, str2) {
answer <- "either string is not greater or equal to twice the length of the other"
if (nchar(str1) >= 2 * nchar(str2)) {
answer <- "one string is greater or equal to twice the length of the other"
}
if (2 * nchar(str1) <= nchar(str2)) {
answer <- "one string is greater or equal to twice the length of the other"
}
return(answer)
}
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long("hahahahaha", "haha")
is_twice_as_long("haha", "hahahahaha")
is_twice_as_long("haha", "haha")
is_twice_as_long("hahaha", "haha")
describe_difference <- function(str1, str2) {
diff <- abs(nchar(str1) - nchar(str2))
if(nchar(str1) > nchar(str2)) {
answer <- paste("Your first string is longer by", diff, "characters")
} if(nchar(str1) < nchar(str2)) {
answer <- paste("Your second string is longer by", diff, "characters")
} else {
answer <- "Your strings are the same length!"
}
return(answer)
}
describe_difference <- function(str1, str2) {
diff <- abs(nchar(str1) - nchar(str2))
if(nchar(str1) > nchar(str2)) {
answer <- paste("Your first string is longer by", diff, "characters")
}
if(nchar(str1) < nchar(str2)) {
answer <- paste("Your second string is longer by", diff, "characters")
}
else {
answer <- "Your strings are the same length!"
}
return(answer)
}
describe_difference("info", "informatics")
describe_difference("coding", "code")
is_twice_as_long <- function(str1, str2) {
answer <- "either string is not greater or equal to twice the length of the other"
if (nchar(str1) >= 2 * nchar(str2)) {
answer <- "one string is greater or equal to twice the length of the other"
} else if (2 * nchar(str1) <= nchar(str2)) {
answer <- "one string is greater or equal to twice the length of the other"
}
return(answer)
}
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long("hahahahaha", "haha")
is_twice_as_long("haha", "hahahahaha")
is_twice_as_long("haha", "haha")
is_twice_as_long("hahaha", "haha")
describe_difference <- function(str1, str2) {
diff <- abs(nchar(str1) - nchar(str2))
if(nchar(str1) > nchar(str2)) {
answer <- paste("Your first string is longer by", diff, "characters")
} else if(nchar(str1) < nchar(str2)) {
answer <- paste("Your second string is longer by", diff, "characters")
} else {
answer <- "Your strings are the same length!"
}
return(answer)
}
describe_difference("info", "informatics")
describe_difference("coding", "code")
describe_difference("Kyle", "Kyle")
add_three <- function(num) {
answer <- num * 3
return(answer)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
imperial_to_metric <- function(feet, inches) {
feet_to_meter <- feet * 0.305
inches_to_meter <- inches * 0.025
result <- feet_to_meter + inches_to_meter
return(result)
imperial_to_metric <- function(feet, inches) {
feet_to_meter <- feet * 0.305
inches_to_meter <- inches * 0.025
result <- feet_to_meter + inches_to_meter
return(result)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 7)
add_three <- function(num) {
answer <- num * 3
return(answer)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
add_three <- function(num) {
answer <- num * 3
return(answer)
}
then
ten
ten <- add_three(7)
ten <- add_three(7)
ten <- add_three(7)
imperial_to_metric <- function(feet, inches) {
feet_to_meter <- feet * 0.305
inches_to_meter <- inches * 0.025
result <- feet_to_meter + inches_to_meter
return(result)
}
is_twice_as_long <- function(str1, str2) {
answer <- "either string is not greater or equal to twice the length of the other"
if (nchar(str1) >= 2 * nchar(str2)) {
answer <- "one string is greater or equal to twice the length of the other"
} else if (2 * nchar(str1) <= nchar(str2)) {
answer <- "one string is greater or equal to twice the length of the other"
}
return(answer)
}
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long("hahahahaha", "haha")
is_twice_as_long <- function(str1, str2) {
answer <- "either string is not greater or equal to twice the length of the other"
if (nchar(str1) >= 2 * nchar(str2)) {
answer <- "one string is greater or equal to twice the length of the other"
} else if (2 * nchar(str1) <= nchar(str2)) {
answer <- "one string is greater or equal to twice the length of the other"
}
return(answer)
}
is_twice_as_long <- function(str1, str2) {
answer <- "either string is not greater or equal to twice the length of the other"
if (nchar(str1) >= 2 * nchar(str2)) {
answer <- "one string is greater or equal to twice the length of the other"
} else if (2 * nchar(str1) <= nchar(str2)) {
answer <- "one string is greater or equal to twice the length of the other"
}
return(answer)
}
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long("hahahahaha", "haha")
is_twice_as_long("haha", "hahahahaha")
is_twice_as_long("haha", "haha")
is_twice_as_long("hahaha", "haha")
describe_difference <- function(str1, str2) {
diff <- abs(nchar(str1) - nchar(str2))
if(nchar(str1) > nchar(str2)) {
answer <- paste("Your first string is longer by", diff, "characters")
} else if(nchar(str1) < nchar(str2)) {
answer <- paste("Your second string is longer by", diff, "characters")
} else {
answer <- "Your strings are the same length!"
}
return(answer)
}
describe_difference("info", "informatics")
describe_difference("coding", "code")
describe_difference("Kyle", "Kyle")
add_three <- function(num) {
answer <- num * 3
return(answer)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
imperial_to_metric <- function(feet, inches) {
feet_to_meter <- feet * 0.305
inches_to_meter <- inches * 0.025
result <- feet_to_meter + inches_to_meter
return(result)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 7)
